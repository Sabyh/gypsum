import * as express from 'express';
import { Logger } from './misc/logger';
import { Model } from './models/model';
import { API_TYPES, RESPONSE_CODES, RESPONSE_DOMAINS, IResponseError } from './types';
import { IService } from './decorators';
export interface IContext {
    headers: any;
    query: any;
    body: any;
    params: any[];
    model: Model;
    service: IService;
    cookies?: any;
    res?: express.Response;
    socket?: any;
    domain?: RESPONSE_DOMAINS;
    room?: string;
}
export declare class Context {
    private _response;
    private _socket;
    private _stack;
    private _locals;
    private _cookies;
    private _res;
    private _domain;
    private _room;
    model: Model;
    service: IService;
    apiType: API_TYPES.REST | API_TYPES.SOCKET;
    headers: any;
    query: any;
    body: any;
    params: any;
    user: any;
    logger: Logger;
    constructor(type: API_TYPES.REST | API_TYPES.SOCKET, data: IContext);
    static Rest(model: Model, service: IService): (req: express.Request, res: express.Response, next: express.NextFunction) => void;
    static Socket(socket: any, model: Model, service: IService): (data: any) => void;
    static deleteContextsOf(type: string, identifier: string): void;
    private _mInit(hooks?, extraHooks?);
    private _mRespond();
    private _mPushStack(hooksList);
    useService(model: Model, service: string, hooks?: 'before' | 'after' | 'both' | 'none', clearOwnHooks?: boolean): void;
    useServiceHooks(service: IService, clearOwnHooks?: boolean): void;
    domain: RESPONSE_DOMAINS;
    readonly room: string;
    getHeader(name: string): string;
    get(name: string): any;
    set(name: string, value: any): Context;
    remove(name: string): Context;
    cookie(name: string, value: string, options?: any): Context;
    cookies(name: string): string;
    clearCookie(name: string): Context;
    joinRoom(roomName?: string): boolean;
    next(err?: IResponseError): void;
    ok(data: any, count?: number, code?: RESPONSE_CODES): void;
    getResponseData(): any;
    setResponseData(data: any): Context;
    sendHtml(html: string, code?: number): void;
    sendFile(filePath: string, code?: number): void;
}
